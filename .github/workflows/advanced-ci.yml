name: Advanced CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run weekly security scans
    - cron: '0 0 * * 0'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Code Quality and Formatting
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
    
    - name: Set up Python 3.13
      run: uv python install 3.13
    
    - name: Install dependencies
      run: uv sync --all-extras --dev
    
    - name: Check code formatting with black
      run: uv run black --check --diff .
    
    - name: Check import sorting with isort
      run: uv run isort --check-only --diff .
    
    - name: Lint with ruff
      run: uv run ruff check --output-format=github .

  # Type Checking
  type-check:
    name: Type Check
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
    
    - name: Set up Python 3.13
      run: uv python install 3.13
    
    - name: Install dependencies
      run: uv sync --all-extras --dev
    
    - name: Type check with mypy
      run: uv run mypy src --show-error-codes --pretty

  # Testing
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.13"]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
    
    - name: Set up Python ${{ matrix.python-version }}
      run: uv python install ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: uv sync --all-extras --dev
    
    - name: Run tests with coverage
      run: |
        uv add --dev pytest-cov
        uv run pytest -v --tb=short --cov=src --cov-report=xml --cov-report=term-missing
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  # CLI Testing
  cli-test:
    name: CLI Testing
    runs-on: ubuntu-latest
    needs: [code-quality, type-check]
    steps:
    - uses: actions/checkout@v4
    
    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
    
    - name: Set up Python 3.13
      run: uv python install 3.13
    
    - name: Install dependencies
      run: uv sync --all-extras --dev
    
    - name: Test CLI help
      run: uv run python cli.py --help
    
    - name: Test configuration generation
      run: uv run python cli.py init --output test-config.yaml
    
    - name: Validate generated config
      run: |
        if [ ! -f test-config.yaml ]; then
          echo "Config file not generated"
          exit 1
        fi
        echo "Generated config file:"
        head -20 test-config.yaml
    
    - name: Test database operations
      run: |
        uv run python cli.py test-db -c test-config.yaml
    
    - name: Test server startup (quick check)
      timeout: 10s
      run: |
        # Start server in background and test it responds
        uv run python cli.py serve -c test-config.yaml --host 127.0.0.1 --port 8899 &
        SERVER_PID=$!
        sleep 3
        curl -f http://127.0.0.1:8899/health || (kill $SERVER_PID && exit 1)
        kill $SERVER_PID

  # Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'push'
    steps:
    - uses: actions/checkout@v4
    
    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
    
    - name: Set up Python 3.13
      run: uv python install 3.13
    
    - name: Install dependencies
      run: uv sync --all-extras --dev
    
    - name: Run safety check
      run: |
        uv add --dev safety
        uv run safety check --json --output safety-report.json || true
    
    - name: Run bandit security linter
      run: |
        uv add --dev bandit
        uv run bandit -r src -f json -o bandit-report.json || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          safety-report.json
          bandit-report.json

  # Dependency Check
  dependency-check:
    name: Dependency Audit
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
    
    - name: Set up Python 3.13
      run: uv python install 3.13
    
    - name: Check for dependency vulnerabilities
      run: |
        # Check for known vulnerabilities in dependencies
        uv sync --all-extras --dev
        uv tree
        
        # Export requirements for vulnerability scanning
        uv export --format requirements-txt --output-file requirements.txt
        echo "Generated requirements.txt:"
        cat requirements.txt

  # Performance Test
  performance:
    name: Performance Test
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4
    
    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
    
    - name: Set up Python 3.13
      run: uv python install 3.13
    
    - name: Install dependencies
      run: uv sync --all-extras --dev
    
    - name: Start test server
      run: |
        uv run python cli.py init --output perf-config.yaml
        uv run python cli.py serve -c perf-config.yaml --host 127.0.0.1 --port 8900 &
        echo $! > server.pid
        sleep 5
    
    - name: Basic performance test
      run: |
        # Simple load test using curl
        echo "Testing health endpoint performance"
        time for i in {1..100}; do
          curl -s http://127.0.0.1:8900/health > /dev/null
        done
        
        echo "Testing upload endpoint performance"
        # Create a small test file
        echo "test audio content" > test.mp3
        time for i in {1..10}; do
          curl -s -X POST http://127.0.0.1:8900/api/call-upload \
            -F "key=test-key" \
            -F "system=1" \
            -F "dateTime=$(date +%s)" \
            -F "test=1" \
            -F "audio=@test.mp3" > /dev/null
        done
    
    - name: Stop test server
      run: |
        if [ -f server.pid ]; then
          kill $(cat server.pid) || true
        fi

  # Build Check
  build-check:
    name: Build & Package Check
    runs-on: ubuntu-latest
    needs: [code-quality, type-check, test]
    steps:
    - uses: actions/checkout@v4
    
    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
    
    - name: Set up Python 3.13
      run: uv python install 3.13
    
    - name: Install dependencies
      run: uv sync --all-extras --dev
    
    - name: Build package
      run: uv build
    
    - name: Check package
      run: |
        uv add --dev twine
        uv run twine check dist/*
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-packages
        path: dist/

  # Status Check
  status-check:
    name: All Checks Passed
    runs-on: ubuntu-latest
    needs: [code-quality, type-check, test, cli-test, dependency-check, build-check]
    if: always()
    steps:
    - name: Check all job results
      run: |
        if [[ "${{ needs.code-quality.result }}" != "success" ]]; then
          echo "Code quality checks failed"
          exit 1
        fi
        if [[ "${{ needs.type-check.result }}" != "success" ]]; then
          echo "Type checking failed"
          exit 1
        fi
        if [[ "${{ needs.test.result }}" != "success" ]]; then
          echo "Tests failed"
          exit 1
        fi
        if [[ "${{ needs.cli-test.result }}" != "success" ]]; then
          echo "CLI tests failed"
          exit 1
        fi
        if [[ "${{ needs.dependency-check.result }}" != "success" ]]; then
          echo "Dependency check failed"
          exit 1
        fi
        if [[ "${{ needs.build-check.result }}" != "success" ]]; then
          echo "Build check failed"
          exit 1
        fi
        echo "All checks passed! âœ…"