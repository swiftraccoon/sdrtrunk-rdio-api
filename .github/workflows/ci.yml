name: CI/CD

on:
  push:
    branches: [ main, develop ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security checks daily at midnight UTC
    - cron: '0 0 * * *'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: "3.13"

jobs:
  # Quick format and lint checks
  format-lint:
    name: Format & Lint
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v5

    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        version: "latest"

    - name: Set up Python
      run: uv python install ${{ env.PYTHON_VERSION }}

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/uv
        key: ${{ runner.os }}-uv-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-uv-

    - name: Install dependencies
      run: uv sync --all-extras --dev

    - name: Check code formatting with black
      run: uv run black --check --diff .

    - name: Check import sorting with isort
      run: uv run isort --check-only --diff .

    - name: Lint with ruff
      run: uv run ruff check --output-format=github .

  # Type checking
  type-check:
    name: Type Check
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v5

    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        version: "latest"

    - name: Set up Python
      run: uv python install ${{ env.PYTHON_VERSION }}

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/uv
        key: ${{ runner.os }}-uv-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-uv-

    - name: Install dependencies
      run: uv sync --all-extras --dev

    - name: Type check with mypy
      run: uv run mypy src --show-error-codes --pretty

  # Main test suite
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    needs: [format-lint, type-check]
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        python-version: ["3.13"]
        # Add more OS/Python combinations only for main branch
        include:
          - os: macos-latest
            python-version: "3.13"
            if: github.ref == 'refs/heads/main'
          - os: windows-latest
            python-version: "3.13"
            if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v5

    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        version: "latest"

    - name: Set up Python ${{ matrix.python-version }}
      run: uv python install ${{ matrix.python-version }}

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/uv
        key: ${{ runner.os }}-uv-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-uv-

    - name: Install dependencies
      run: uv sync --all-extras --dev

    - name: Run tests with coverage
      run: uv run pytest -v --tb=short --cov=src --cov-report=xml --cov-report=term-missing

    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        verbose: true
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

    - name: Test CLI help
      run: uv run python cli.py --help

    - name: Test configuration generation
      run: |
        uv run python cli.py init --output test-config.yaml
        if [ ! -f test-config.yaml ]; then
          echo "Config file not generated"
          exit 1
        fi

    - name: Test database operations
      run: uv run python cli.py -c test-config.yaml test-db

  # Security scanning - only on main branch and schedules
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || (github.event_name == 'push' && github.ref == 'refs/heads/main')

    steps:
    - uses: actions/checkout@v5

    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        version: "latest"

    - name: Set up Python
      run: uv python install ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: uv sync --all-extras --dev

    - name: Run Bandit security scan
      run: |
        uv run bandit -r src/ -f json -o bandit-report.json || true
        uv run bandit -r src/ -ll

    - name: Check for dependency vulnerabilities
      run: |
        uv pip list --format=freeze > requirements.txt
        uv run pip-audit -r requirements.txt --format json -o audit-report.json || true
        uv run pip-audit -r requirements.txt

    - name: Upload security reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          bandit-report.json
          audit-report.json

    - name: Run TruffleHog secrets detection
      if: github.event_name != 'schedule'
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: ${{ github.event.pull_request.base.sha || github.event.before }}
        head: ${{ github.event.pull_request.head.sha || github.sha }}

  # Docker build - only on main branch pushes
  docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v5

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: rdiocallsapi:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Release process - only on version tags
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [test, format-lint, type-check]
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
    - uses: actions/checkout@v5
      with:
        fetch-depth: 0

    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        version: "latest"

    - name: Set up Python
      run: uv python install ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: uv sync --all-extras --dev

    - name: Build distribution packages
      run: uv build

    - name: Check package quality
      run: uv run twine check dist/*

    - name: Extract version
      id: version
      run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: dist/*
        draft: false
        prerelease: ${{ contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
        body: |
          Release ${{ steps.version.outputs.version }}

          See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for details.

  # Dependency check for scheduled runs
  dependency-check:
    name: Check Dependencies
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'

    steps:
    - uses: actions/checkout@v5

    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        version: "latest"

    - name: Set up Python
      run: uv python install ${{ env.PYTHON_VERSION }}

    - name: Check for outdated dependencies
      run: |
        uv sync --all-extras --dev
        uv pip list --outdated || true

    - name: Create issue if dependencies are outdated
      if: failure()
      uses: actions/github-script@v7
      with:
        script: |
          const issues = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            labels: 'dependencies',
            state: 'open'
          });

          if (issues.data.length === 0) {
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'Dependencies need updating',
              body: 'Automated check found outdated dependencies. Please review and update.',
              labels: ['dependencies', 'maintenance']
            });
          }