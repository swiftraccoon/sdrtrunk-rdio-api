version: '3.8'

services:
  rdio-api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: rdio-calls-api
    restart: unless-stopped
    ports:
      - "8000:8000"
    volumes:
      # Data persistence
      - ./data:/app/data
      - ./logs:/app/logs
      # Configuration (optional - can use environment variables instead)
      - ./config.yaml:/app/config.yaml:ro
    environment:
      # Override configuration via environment variables
      - RDIO_SERVER_HOST=0.0.0.0
      - RDIO_SERVER_PORT=8000
      - RDIO_SERVER_DEBUG=false
      - RDIO_DATABASE_PATH=/app/data/rdio_calls.db
      - RDIO_FILE_STORAGE_DIRECTORY=/app/data/audio
      - RDIO_FILE_TEMP_DIRECTORY=/app/data/temp
      - RDIO_LOGGING_LEVEL=INFO
      - RDIO_LOGGING_FILE=/app/logs/rdio_calls_api.log
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - rdio-network
    labels:
      - "com.rdio.description=RdioCallsAPI Server"
      - "com.rdio.version=1.0.0"

  # Optional: Redis for caching (future enhancement)
  # redis:
  #   image: redis:7-alpine
  #   container_name: rdio-redis
  #   restart: unless-stopped
  #   volumes:
  #     - redis-data:/data
  #   networks:
  #     - rdio-network
  #   command: redis-server --appendonly yes

  # Optional: PostgreSQL for production (instead of SQLite)
  # postgres:
  #   image: postgres:16-alpine
  #   container_name: rdio-postgres
  #   restart: unless-stopped
  #   environment:
  #     - POSTGRES_DB=rdio_calls
  #     - POSTGRES_USER=rdio
  #     - POSTGRES_PASSWORD=changeme
  #   volumes:
  #     - postgres-data:/var/lib/postgresql/data
  #   networks:
  #     - rdio-network

networks:
  rdio-network:
    driver: bridge

volumes:
  # redis-data:
  # postgres-data: